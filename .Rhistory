(1-exp(-r*N))/(exp(r) - 1)   #modify to use discrete payments with continuous compounding
} # end function PVAF
###############################################################################
muS = 0.075; sigS = 0.20
muB = 0.04; sigB = 0.05
rhoSB = -0.25
dt = 1; dT = 30 #NS = 30
nobs =  100000
# initialize objects to store results in simulations
V1S = matrix(1,nobs,dT); V1B = V1S #start one year from now with $1 in that account
GS=0; GB=0 #compute final correlation between cumulative log shocks
#potential future values of putting in one dollar
set.seed(1001)
j=2 #start at end of year 2
for(j in 2:dT){
zS = rnorm(nobs) #like z1
zB = rhoSB*zS + sqrt(1-rhoSB^2) * rnorm(nobs) #last term is z2
#correlation of zS and zB is approx -0.25
dGS = (muS - 0.5*sigS^2)*dt + sigS*zS*sqrt(dt) #(shock) change in logs of stock price (dz = zS)
dGB = (muB - 0.5*sigB^2)*dt + sigB*zB*sqrt(dt) #change in logs of bond price
GS=GS+dGS; GB=GB+dGB #running total, adds up shocks
V1S[,j] = 1 + V1S[,j-1]*exp(dGS) #1 for $1 plus potential values from dollar that are put
#in at the end of last period
V1B[,j] = 1 + V1B[,j-1]*exp(dGB)
} # end loop for(j in 2:dT)
FV1S = V1S[,dT] #vector of potential values at the end of the time period
FV1B = V1B[,dT]
cor(GS,GB) #close to -0.25
cor(FV1S,FV1B) #not -0.25 because putting in a dollar each period decreases the
AR1S = FV1S/PVAF(0.03,30) #calculates the effective amount of yearly retirement income achieved
#per $1 into stock account each year.
AR1B = FV1B/PVAF(0.03,30)
summary(AR1S) #we could on avergae pull out mean dollars each year until we die
#if we put in $1 each year
summary(AR1B)
probs=seq(0.05,0.95,0.05) #probability values with two tails
quantile(AR1S,probs=probs) #
quantile(AR1B,probs=probs)
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
(mu1 = mean(AR1S))
(A = G/mu1)
AR = A * AR1S #dollars times returns per dollar
mean(AR)
quantile(AR,probs=seq(0.05,0.95,0.05))
mu1
###############################################################################
rm(list=ls()); graphics.off
###############################################################################
source('C:/Users/ethan/Downloads/Misc_functions.R')
###############################################################################
PVAF = function(r=0.03,N=30){
(1-exp(-r*N))/(exp(r) - 1)   #modify to use discrete payments with continuous compounding
} # end function PVAF
###############################################################################
muS = 0.075; sigS = 0.20
muB = 0.04; sigB = 0.05
rhoSB = -0.25
dt = 1; dT = 30 #NS = 30
nobs =  100000
# initialize objects to store results in simulations
V1S = matrix(1,nobs,dT); V1B = V1S #start one year from now with $1 in that account
GS=0; GB=0 #compute final correlation between cumulative log shocks
#potential future values of putting in one dollar
set.seed(1001)
j=2 #start at end of year 2
for(j in 2:dT){
zS = rnorm(nobs) #like z1
zB = rhoSB*zS + sqrt(1-rhoSB^2) * rnorm(nobs) #last term is z2
#correlation of zS and zB is approx -0.25
dGS = (muS - 0.5*sigS^2)*dt + sigS*zS*sqrt(dt) #(shock) change in logs of stock price (dz = zS)
dGB = (muB - 0.5*sigB^2)*dt + sigB*zB*sqrt(dt) #change in logs of bond price
GS=GS+dGS; GB=GB+dGB #running total, adds up shocks
V1S[,j] = 1 + V1S[,j-1]*exp(dGS) #1 for $1 plus potential values from dollar that are put
#in at the end of last period
V1B[,j] = 1 + V1B[,j-1]*exp(dGB)
} # end loop for(j in 2:dT)
FV1S = V1S[,dT] #vector of potential values at the end of the time period
FV1B = V1B[,dT]
cor(GS,GB) #close to -0.25
cor(FV1S,FV1B) #not -0.25 because putting in a dollar each period decreases the
AR1S = FV1S/PVAF(0.03,30) #calculates the effective amount of yearly retirement income achieved
#per $1 into stock account each year.
AR1B = FV1B/PVAF(0.03,30)
summary(AR1S) #we could on avergae pull out mean dollars each year until we die
#if we put in $1 each year
summary(AR1B)
probs=seq(0.05,0.95,0.05) #probability values with two tails
quantile(AR1S,probs=probs) #
quantile(AR1B,probs=probs)
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
#(mu1 = mean(AR1S))
#(A = G/mu1)
A = 825.85
AR = A * AR1S #dollars times returns per dollar
mean(AR)
quantile(AR,probs=seq(0.05,0.95,0.05))
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
(mu1 = mean(AR1S))
(A = G/mu1)
#A = 825.85
AR = A * AR1S #dollars times returns per dollar
mean(AR)
quantile(AR,probs=seq(0.05,0.95,0.05))
#(mu1 = mean(AR1S))
#(A = G/mu1)
A = 825.85
AR = A * AR1S #dollars times returns per dollar
mean(AR)
quantile(AR,probs=seq(0.05,0.95,0.05))
AR1S
#(mu1 = mean(AR1S))
(A2 = 1583.10)
AR2 = A2 * AR1B #dollars times returns per dollar
mean(AR2)
quantile(AR2,probs=seq(0.05,0.95,0.05))
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
(mu1 = mean(AR1S))
(A = G/mu1)
#A = 825.85
AR = A * AR1S #dollars times returns per dollar
mean(AR)
quantile(AR,probs=seq(0.05,0.95,0.05))
(mu2 = mean(AR1B))
(A2 = G/mu2)
#(A2 = 1583.10)
AR2 = A2 * AR1B #dollars times returns per dollar
mean(AR2)
quantile(AR2,probs=seq(0.05,0.95,0.05))
G = 50000
(VaR10 = quantile(AR1S,probs=0.10))
(A = G/VaR10)
AR = A * AR1S
quantile(AR,probs=0.10)
quantile(AR,probs=seq(0.05,0.95,0.05))
(mu1 = mean(AR1S))
(A = G/mu1)
#A = 825.85
AR = A * AR1S #dollars times returns per dollar
mean(AR)
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
(mu1 = mean(AR1S))
(A = G/mu1)
###############################################################################
rm(list=ls()); graphics.off
###############################################################################
source('C:/Users/ethan/Downloads/Misc_functions.R')
###############################################################################
PVAF = function(r=0.03,N=30){
(1-exp(-r*N))/(exp(r) - 1)   #modify to use discrete payments with continuous compounding
} # end function PVAF
###############################################################################
muS = 0.075; sigS = 0.20
muB = 0.04; sigB = 0.05
rhoSB = -0.25
dt = 1; dT = 30 #NS = 30
nobs =  100000
# initialize objects to store results in simulations
V1S = matrix(1,nobs,dT); V1B = V1S #start one year from now with $1 in that account
GS=0; GB=0 #compute final correlation between cumulative log shocks
#potential future values of putting in one dollar
set.seed(1001)
j=2 #start at end of year 2
for(j in 2:dT){
zS = rnorm(nobs) #like z1
zB = rhoSB*zS + sqrt(1-rhoSB^2) * rnorm(nobs) #last term is z2
#correlation of zS and zB is approx -0.25
dGS = (muS - 0.5*sigS^2)*dt + sigS*zS*sqrt(dt) #(shock) change in logs of stock price (dz = zS)
dGB = (muB - 0.5*sigB^2)*dt + sigB*zB*sqrt(dt) #change in logs of bond price
GS=GS+dGS; GB=GB+dGB #running total, adds up shocks
V1S[,j] = 1 + V1S[,j-1]*exp(dGS) #1 for $1 plus potential values from dollar that are put
#in at the end of last period
V1B[,j] = 1 + V1B[,j-1]*exp(dGB)
} # end loop for(j in 2:dT)
FV1S = V1S[,dT] #vector of potential values at the end of the time period
FV1B = V1B[,dT]
cor(GS,GB) #close to -0.25
cor(FV1S,FV1B) #not -0.25 because putting in a dollar each period decreases the
AR1S = FV1S/PVAF(0.03,30) #calculates the effective amount of yearly retirement income achieved
#per $1 into stock account each year.
AR1B = FV1B/PVAF(0.03,30)
summary(AR1S) #we could on avergae pull out mean dollars each year until we die
#if we put in $1 each year
summary(AR1B)
probs=seq(0.05,0.95,0.05) #probability values with two tails
quantile(AR1S,probs=probs) #
quantile(AR1B,probs=probs)
###############################################################################
# Hint for problem set:
G = 90000 #mean goal to save $50000 at start of retirement
(mu1 = mean(AR1S))
(A = G/mu1)
AR = A * AR1S #dollars times returns per dollar
mean(AR)
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=F,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = TRUE,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
reg <- lm(lifeExp~gdpPercap + year, df)
reg %>% tidy()
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
View(reg)
View(log2)
View(log2)
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 %>% tidy()
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
library(gapminder)
library(knitr)
library(tidyverse)
library(data.table)
library(ggplot2)
library(broom)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 %>% tidy()
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 <- reg %>% tidy()
#Model 2
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
# In model 1 where the exogeneity assumption holds, the estimate for beta 1 is:
print(reg22$estimate[2])
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 <- reg %>% tidy()
#Model 2
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
# In model 1 where the exogeneity assumption holds, the estimate for beta 1 is:
print(reg2$estimate[2])
#This means that for every
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 <- reg %>% tidy()
#Model 2
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
#The estimate for beta 1 hat in the first model is:
print(reg2$estimate[2])
# In model 1 if the exogeneity assumption holds, this means that every 1% increase in gdpPercap leads to a 0.0006697323% change in life expectancy
#In model 1 if the exogeneity assumption does not hold,
#this means that a 1% increase in gdpPercap is associated with a 0.0006697323% higher value in
#life expectancy
#The estimate for beta 1 hat in the first model is:
print(log2$estimate[2])
# In model 2 if the exogeneity assumption holds,
#this means that for every 1% increase in gdpPercap leads to a 0.0006697323% change in life
#expectancy
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
#The standard error of the slope coefficient from the regression result is:
print(log2$std.error[2])
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 <- reg %>% tidy()
#Model 2
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
#The estimate for beta 1 hat in the first model is:
print(reg2$estimate[2])
# In model 1 if the exogeneity assumption holds, this means that every 1% increase in gdpPercap leads to a 0.0006697323% change in life expectancy
#In model 1 if the exogeneity assumption does not hold,
#this means that a 1% increase in gdpPercap is associated with a 0.0006697323% higher value in
#life expectancy
#The estimate for beta 1 hat in the second model is:
print(log2$estimate[2])
# In model 2 if the exogeneity assumption holds,
#this means that for every 1% increase in gdpPercap leads to a 0.1350503 % change in life expectancy
# In model 2 if the exogeneity assumption does not hold,
#this means that a 1% increase in gdpPercap is associated with a 0.1350503 % higher
#value in life expectancy
#The standard error of the slope coefficient from the regression result is:
print(log2$std.error[2])
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = F,
dpi = 300,
warning = F,
message = F
)
k <- length(log1$coefficients)
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = T,
dpi = 300,
warning = F,
message = F
)
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = T,
dpi = 300,
warning = F,
message = F
)
df <- gapminder
#Model 1
reg <- lm(lifeExp~gdpPercap + year, df)
reg2 <- reg %>% tidy()
#Model 2
log1 <- lm(log(lifeExp)~log(gdpPercap) + year, df)
log2 <- log1 %>% tidy()
#The estimate for beta 1 hat in the first model is:
print(reg2$estimate[2])
# In model 1 if the exogeneity assumption holds, this means that every 1% increase in gdpPercap leads to a 0.0006697323% change in life expectancy
#In model 1 if the exogeneity assumption does not hold,
#this means that a 1% increase in gdpPercap is associated with a 0.0006697323% higher value in
#life expectancy
#The estimate for beta 1 hat in the second model is:
print(log2$estimate[2])
# In model 2 if the exogeneity assumption holds,
#this means that for every 1% increase in gdpPercap leads to a 0.1350503 % change in life expectancy
# In model 2 if the exogeneity assumption does not hold,
#this means that a 1% increase in gdpPercap is associated with a 0.1350503 % higher
#value in life expectancy
k <- length(log1$coefficients)
n <- length(df$gdpPercap)
sigma <- sqrt(sum((log1$residuals)^2)/(n-k-1))
#se <- sigma/(sd(df$gdpPercap)*sqrt(n-1))
#se
rm(list=ls()); graphics.off
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
knitr::opts_chunk$set(
echo=T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
cache = T,
dpi = 300,
warning = F,
message = F
)
k <- length(log1$coefficients)
#Delete this
setwd("C:/Users/ethan/OneDrive/Documents/GitHub/ECNS-460-Term-Project")
#Libraries
library(sf)
library(dplyr)
library(ggplot2)
library(spdep)
#Load data
load("Cleaned Data/property_data.RData")
ggplot() +
geom_sf(data = properties, fill = "lightgrey", color = "black") +
geom_sf(data = properties, aes(color = Sale.Amount), size = 1) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "House Prices Across Zones", color = "Sale Amount")
#Spatial Autocorrelaiton test
coords <- properties$Location  # Get coordinates for each point
neighbors <- dnearneigh(coords, 0, 1000)  # Neighbors within 1000 meters
properties_clean <- properties[!is.na(properties$Sale.Amount), ]
# Ensure that the weights matrix is consistent with the cleaned data
coords_clean <- properties_clean$Location  # Get coordinates for the cleaned data
neighbors_clean <- dnearneigh(coords_clean, 0, 1000)  # Create neighbors with cleaned data
View(neighbors_clean)
# Create the new spatial weights matrix
weights_clean <- nb2listw(neighbors_clean)
View(weights_clean)
# --
sem_model <- errorsarlm(Sale.Amount ~ tmax + factor(Zone.Name), data = data_sf, listw = weights)
install.packages("rgdal")
library(rgdal)
library(spdep)
errorsarlm()
version
version
